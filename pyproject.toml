[build-system]
build-backend = "hatchling.build"
requires = [ "hatch-vcs", "hatchling" ]

[project]
name = "dso-core"
description = "Data Science Operations on top of dvc"
readme = "README.md"
license = { file = "LICENSE" }
maintainers = [
  { name = "Gregor Sturm", email = "gregor.sturm@boehringer-ingelheim.com" },
]
authors = [
  { name = "Gregor Sturm" },
  { name = "Thomas Schwarzl" },
  { name = "Alexander Peltzer" },
]
requires-python = ">=3.10"
classifiers = [
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
dynamic = [ "version" ]
dependencies = [
  "dvc",
  "hiyapyco>=0.7",
  "jinja2",
  "panflute",
  "pillow",
  "pre-commit",
  "pypdf",
  "pyyaml",
  "questionary",
  "rich",
  "rich-click",
  "ruamel-yaml",
  "svgutils",
]

optional-dependencies.dev = [ "hatch", "pre-commit" ]
optional-dependencies.doc = [
  "docutils>=0.8,!=0.18.*,!=0.19.*",
  # For notebooks
  "ipykernel",
  "ipython",
  "matplotlib",
  "myst-nb>=1.1",
  "sphinx>=4",
  "sphinx-autodoc-typehints",
  "sphinx-book-theme>=1",
  "sphinx-copybutton",
  "sphinxcontrib-bibtex>=1",
  "sphinxext-opengraph",
]
optional-dependencies.test = [
  "coverage",
  "freezegun",
  "pytest",
  "pytest-asyncio", # for async tests
  "pytest-cov",
  "pytest-xdist",   # for parallel testing with `pytest -n`
  "quarto",
]
urls.Documentation = "https://github.com/Boehringer-Ingelheim/dso"
urls.Home-page = "https://github.com/Boehringer-Ingelheim/dso"
urls.Source = "https://github.com/Boehringer-Ingelheim/dso"
scripts.dso = "dso:cli"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.wheel]
packages = [ "src/dso" ]

[tool.hatch.envs.default]
installer = "uv"
features = [ "dev" ]

[tool.hatch.envs.docs]
features = [ "doc" ]
scripts.build = "sphinx-build -M html docs docs/_build {args}"
scripts.open = "python -m webbrowser -t docs/_build/html/index.html"
scripts.clean = "git clean -fdX -- {args:docs}"

[tool.hatch.envs.hatch-test]
features = [ "test" ]
[[tool.hatch.envs.hatch-test.matrix]]
python = [ "3.12" ]

[tool.ruff]
line-length = 120
src = [ "src" ]
extend-include = [ "*.ipynb" ]
exclude = [
  "src/dso/hiyapyco.py",
]

format.docstring-code-format = true
lint.select = [
  "B",      # flake8-bugbear
  "BLE",    # flake8-blind-except
  "C4",     # flake8-comprehensions
  "D",      # pydocstyle
  "E",      # Error detected by Pycodestyle
  "F",      # Errors detected by Pyflakes
  "I",      # isort
  "RUF100", # Report unused noqa directives
  "TID",    # flake8-tidy-imports
  "UP",     # pyupgrade
  "W",      # Warning detected by Pycodestyle
]
lint.ignore = [
  # Errors from function calls in argument defaults. These are fine when the result is immutable.
  "B008",
  # Missing docstring in public module
  "D100",
  # Missing docstring in public package
  "D104",
  # __magic__ methods are often self-explanatory, allow missing docstrings
  "D105",
  # Missing docstring in __init__
  "D107",
  ## Disable one in each pair of mutually incompatible rules
  # We donâ€™t want a blank line before a class docstring
  "D203",
  # We want docstrings to start immediately after the opening triple quote
  "D213",
  # first line should end with a period [Bug: doesn't work with single-line docstrings]
  "D400",
  # First line should be in imperative mood; try rephrasing
  "D401",
  # line too long -> we accept long comment lines; formatter gets rid of long code lines
  "E501",
  # Do not assign a lambda expression, use a def -> lambda expression assignments are convenient
  "E731",
  # allow I, O, l as variable names -> I is the identity matrix
  "E741",
]
lint.per-file-ignores."docs/*" = [ "I" ]
lint.per-file-ignores."tests/*" = [ "D" ]
lint.pydocstyle.convention = "numpy"

[tool.pytest.ini_options]
testpaths = [ "tests" ]
xfail_strict = true
addopts = [
  "--import-mode=importlib", # allow using test files with same name
]

[tool.coverage.run]
source = [ "dso" ]
omit = [
  "**/test_*.py",
]

[tool.cruft]
skip = [
  "tests",
  "src/**/__init__.py",
  "src/**/basic.py",
  "docs/api.md",
  "docs/changelog.md",
  "docs/references.bib",
  "docs/references.md",
  "docs/notebooks/example.ipynb",
]

# {{ name }} - Quarto Jupyter Notebook Stage Template Usage Guide

## About This Template
This template creates a Quarto-based stage using a Jupyter notebook for generating reports and analyses as part of your DVC pipeline.

## Description
{{ description }}

## How to Use This Stage

### Getting Started
1. Open the `src/{{ name }}.ipynb` file - this is your main Jupyter notebook
2. Edit the notebook to include your Python analysis
3. Update `dvc.yaml` to declare your inputs and outputs

### Key Files
- `src/{{ name }}.ipynb`: Your main Jupyter notebook with Python code
- `dvc.yaml`: DVC pipeline definition - update dependencies and outputs here
- `params.in.yaml`: Parameter definitions (add your analysis parameters here)
- `input/`: Directory for input files (add your data files here)
- `output/`: Directory for output files (reports and artifacts will be generated here)
- `README.md`: Documentation for this specific stage

### Working with Jupyter Notebooks
1. **Edit with your favorite editor**: Use Jupyter Lab, VS Code, or any notebook editor
2. **Use parameters**: Access parameters with `read_params("{{ rel_path_from_project_root }}")`
3. **Read input data**: Reference files in the `input/` directory
4. **Save outputs**: Write results to the `output/` directory

### Example Notebook Content
The notebook already contains a basic structure. You can:

1. **Import libraries**:
   ```python
   import pandas as pd
   import matplotlib.pyplot as plt
   from dso import read_params
   ```

2. **Read parameters**:
   ```python
   params = read_params("{{ rel_path_from_project_root }}")
   ```

3. **Load and analyze data**:
   ```python
   # Read input data
   df = pd.read_csv("input/data.csv")
   
   # Your analysis here
   result = df.describe()
   
   # Create visualizations
   plt.figure(figsize=(10, 6))
   plt.plot(df['column'])
   plt.title("{{ name | title }}")
   plt.savefig("output/plot.png")
   
   # Save results
   result.to_csv("output/summary.csv")
   ```

### Next Steps
1. Update dependencies (`deps`) in `dvc.yaml` to include your input files
2. Update outputs (`outs`) in `dvc.yaml` to include generated reports and data
3. Add analysis parameters to `params.in.yaml`
4. Implement your analysis in `src/{{ name }}.ipynb`
5. Test your stage with: `dvc repro {{ name }}`

## Tips
- Use `read_params("{{ rel_path_from_project_root }}")` to access parameters from your notebook
- The output HTML report will be automatically generated in the `output/` directory via Quarto
- Clear cell outputs before committing to keep the notebook clean
- Consider using relative paths for better portability
- You can run the notebook interactively for development, then use DVC for production runs